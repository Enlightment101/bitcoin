name: CI
on:
  pull_request:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.event_name != 'pull_request' && github.run_id || github.ref }}
  cancel-in-progress: true

env:
  CI_FAILFAST_TEST_LEAVE_DANGLING: 1
  MAKEJOBS: '-j10'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        arch: [x64, x86, arm, arm64]
        
    name: Build for ${{ matrix.arch }}
    
    if: github.repository != 'bitcoin-core/gui' || github.event_name == 'pull_request'

    env:
      PYTHONUTF8: 1
      TEST_RUNNER_TIMEOUT_FACTOR: 40
      VCPKG_TARGET_TRIPLET: ${{ format('vcpkg-triplet-{0}', matrix.arch) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Developer Command Prompt for Microsoft Visual C++
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Get tool information
        run: |
          cmake -version | Tee-Object -FilePath "cmake_version"
          Write-Output "---"
          msbuild -version | Tee-Object -FilePath "msbuild_version"
          $env:VCToolsVersion | Tee-Object -FilePath "toolset_version"
          py -3 --version
          Write-Host "PowerShell version $($PSVersionTable.PSVersion.ToString())"

      - name: Using vcpkg with MSBuild
        run: |
          Set-Location "$env:VCPKG_INSTALLATION_ROOT"
          Add-Content -Path "triplets\x64-windows.cmake" -Value "set(VCPKG_BUILD_TYPE release)"
          Add-Content -Path "triplets\x86-windows.cmake" -Value "set(VCPKG_BUILD_TYPE release)"
          Add-Content -Path "triplets\arm-windows.cmake" -Value "set(VCPKG_BUILD_TYPE release)"
          Add-Content -Path "triplets\arm64-windows.cmake" -Value "set(VCPKG_BUILD_TYPE release)"

      - name: vcpkg tools cache
        uses: actions/cache@v4
        with:
          path: C:/vcpkg/downloads/tools
          key: ${{ github.job }}-vcpkg-tools

      - name: Restore vcpkg binary cache
        uses: actions/cache/restore@v4
        id: vcpkg-binary-cache
        with:
          path: ~/AppData/Local/vcpkg/archives
          key: ${{ github.job }}-vcpkg-binary-${{ hashFiles('cmake_version', 'msbuild_version', 'toolset_version', 'vcpkg.json') }}

      - name: Generate build system
        run: |
          cmake -B build --preset vs2022-${{ matrix.arch }}-static -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" -DBUILD_GUI=ON -DWITH_BDB=ON -DWITH_MINIUPNPC=ON -DWITH_ZMQ=ON -DBUILD_BENCH=ON -DBUILD_FUZZ_BINARY=ON

      - name: Save vcpkg binary cache
        uses: actions/cache/save@v4
        if: github.event_name != 'pull_request' && steps.vcpkg-binary-cache.outputs.cache-hit != 'true'
        with:
          path: ~/AppData/Local/vcpkg/archives
          key: ${{ github.job }}-vcpkg-binary-${{ hashFiles('cmake_version', 'msbuild_version', 'toolset_version', 'vcpkg.json') }}

      - name: Build
        working-directory: build
        run: |
          cmake --build . -j $env:NUMBER_OF_PROCESSORS --config Release

      - name: Create a zip package of Release build
        run: |
          mkdir -p release-package
          cd ${{ github.workspace }}/build/src/Release/
          zip -r ${{ github.workspace }}/release-package/release-${{ matrix.arch }}.zip .

      - name: Upload Release Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.arch }}
          path: ${{ github.workspace }}/release-package/release-${{ matrix.arch }}.zip
